'use client'\n\nimport { useState, useEffect } from 'react'\nimport { IProduct } from '@/lib/models/Product'\n\ninterface UseHomepageProductsOptions {\n  maxProducts?: number\n  showOnlyPopular?: boolean\n  showOnlyActive?: boolean\n}\n\ninterface UseHomepageProductsReturn {\n  products: IProduct[]\n  loading: boolean\n  error: string | null\n  refetch: () => void\n}\n\nexport const useHomepageProducts = ({\n  maxProducts = 6,\n  showOnlyPopular = false,\n  showOnlyActive = true\n}: UseHomepageProductsOptions = {}): UseHomepageProductsReturn => {\n  const [products, setProducts] = useState<IProduct[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchProducts = async () => {\n    try {\n      setLoading(true)\n      setError(null)\n\n      // Construir query params\n      const params = new URLSearchParams()\n      if (showOnlyActive) params.append('active', 'true')\n      if (showOnlyPopular) params.append('popular', 'true')\n      if (maxProducts) params.append('limit', maxProducts.toString())\n      \n      const response = await fetch(`/api/products?${params.toString()}`)\n      \n      if (!response.ok) {\n        throw new Error('Error al cargar productos')\n      }\n\n      const data = await response.json()\n      \n      if (data.success) {\n        let filteredProducts = data.data\n        \n        // Filtros adicionales en cliente si es necesario\n        if (showOnlyPopular && !params.has('popular')) {\n          filteredProducts = filteredProducts.filter((p: IProduct) => p.popular)\n        }\n        \n        if (maxProducts && filteredProducts.length > maxProducts) {\n          filteredProducts = filteredProducts.slice(0, maxProducts)\n        }\n        \n        setProducts(filteredProducts)\n      } else {\n        throw new Error(data.message || 'Error al cargar productos')\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido'\n      setError(errorMessage)\n      console.error('Error fetching homepage products:', err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchProducts()\n  }, [maxProducts, showOnlyPopular, showOnlyActive])\n\n  return {\n    products,\n    loading,\n    error,\n    refetch: fetchProducts\n  }\n}\n\nexport default useHomepageProducts\n